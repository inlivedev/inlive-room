
-- count registered participant join event
SELECT count(*)
FROM (
    SELECT DISTINCT al.meta ->> 'clientID' AS clientID
    FROM activities_logs al 
    INNER JOIN events_participant ep ON al.meta ->> 'clientID' = ep.client_id 
    WHERE ep.event_id = 5
) AS distinc_client;

-- get registered participant join event
SELECT ep2.* FROM (
SELECT DISTINCT al.meta ->> 'clientID' AS clientID
    FROM activities_logs al 
    INNER JOIN events_participant ep ON al.meta ->> 'clientID' = ep.client_id 
    WHERE ep.event_id = 5
) AS distinct_client
INNER JOIN events_participant ep2 ON ep2.client_id = distinct_client.clientid
    

-- get participant has joined or not based on clientID
SELECT 
    COALESCE(distinct_client.clientID, ep2.client_id) AS client_id,
    CASE
        WHEN distinct_client.clientID IS NOT NULL AND ep2.client_id IS NOT NULL THEN true
        ELSE false
    END AS joined,
        CASE
        WHEN ep2.client_id IS NOT NULL THEN true
        ELSE false
    END AS registered,
    ep2.*
FROM (
    SELECT DISTINCT al.meta ->> 'clientID' AS clientID
    FROM activities_logs al 
    INNER JOIN events_participant ep ON al.meta ->> 'clientID' = ep.client_id 
    WHERE ep.event_id = 5
) AS distinct_client
FULL JOIN events_participant ep2 ON ep2.client_id = distinct_client.clientID
WHERE ep2.event_id=5


---
SELECT DISTINCT 
	mapped_participants.id,
	CASE 
		WHEN mapped_participants.client_id IS NOT NULL THEN mapped_participants.client_id
		ELSE client_ids 
	END AS client_id,
	CASE 
		WHEN mapped_participants.first_name IS NOT NULL AND mapped_participants.last_name IS NOT NULL THEN CONCAT_WS(' ',mapped_participants.first_name,mapped_participants.last_name)
		ELSE mapped_participants.name
	END AS name,
	mapped_participants.email,
	mapped_participants.registered,
	mapped_participants.joined
FROM (
	-- add registered, joined property
	SELECT *,
		CASE 
			WHEN ep.client_id IS NULL THEN FALSE
			ELSE TRUE
		END AS registered,
		CASE 
			WHEN (ep.client_id IS NOT NULL AND distinct_clients.client_ids IS NOT NULL) OR (ep.client_id IS NULL AND distinct_clients.client_ids IS NOT NULL) THEN TRUE
			ELSE FALSE 
		END AS joined
	FROM (
		-- filter the client by distinct clientID
		SELECT 
			DISTINCT event_logs.meta ->> 'clientID' AS client_ids,
			meta ->>'name' AS name
		FROM 
		(
			-- get the list of client that connect to event room id
			SELECT * 
			FROM activities_logs al 
			INNER JOIN events e ON e.room_id = al.meta ->>'roomID'
			WHERE e.id =5
		) AS event_logs
	) AS distinct_clients
	FULL JOIN events_participant ep ON ep.client_id = distinct_clients.client_ids
	WHERE ep.event_id IS NULL OR ep.event_id = 5
) AS mapped_participants


-- get non registered participant
SELECT al.*
FROM activities_logs al
LEFT JOIN events_participant ep ON al.meta ->>'clientID' = ep.client_id 
WHERE ep.client_id IS NULL 

-- get roomDuration meta grouped per clientID
SELECT meta ->> 'clientID' AS clientID, ARRAY_AGG(meta ORDER BY meta ->> 'joinTime') AS combined_data
FROM activities_logs al 
WHERE meta ->> 'roomID' = 'rRb-J37hkdAv' AND al."name" = 'RoomDuration'
GROUP BY clientID;
