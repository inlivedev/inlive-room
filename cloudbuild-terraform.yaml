timeout: 900s
steps:
  - name: node:18.16.1
    entrypoint: npm
    args:
      - install

  - name: node:18.16.1
    entrypoint: npm
    args:
      - run
      - create:env
    env:
      - NEXT_PUBLIC_APP_ENV=${_NEXT_PUBLIC_APP_ENV}
      - NEXT_PUBLIC_APP_ORIGIN=${_NEXT_PUBLIC_APP_ORIGIN}
      - NEXT_PUBLIC_INLIVE_HUB_ORIGIN=${_NEXT_PUBLIC_INLIVE_HUB_ORIGIN}
      - NEXT_PUBLIC_INLIVE_HUB_VERSION=${_NEXT_PUBLIC_INLIVE_HUB_VERSION}
      - NEXT_PUBLIC_INLIVE_API_ORIGIN=${_NEXT_PUBLIC_INLIVE_API_ORIGIN}
      - NEXT_PUBLIC_INLIVE_API_VERSION=${_NEXT_PUBLIC_INLIVE_API_VERSION}
      - NEXT_PUBLIC_MIXPANEL_TOKEN=${_NEXT_PUBLIC_MIXPANEL_TOKEN}
      - NEXT_PUBLIC_SENTRY_DSN=${_NEXT_PUBLIC_SENTRY_DSN}
      - PERSISTENT_DATA=true
      - ENABLE_MAILER=true
      - ROOM_INV_EMAIL_TEMPLATE=${_ROOM_INV_EMAIL_TEMPLATE}
    secretEnv: ['DB_HOST','DB_NAME','DB_PASS','DB_USER','MAILER_API_KEY','MAILER_DOMAIN','INLIVE_HUB_API_KEY']
  # Build the container image
  - name: gcr.io/cloud-builders/docker
    args:
      - build
      - -t
      - ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}:$SHORT_SHA
      - -t
      - ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}:latest
      - .
      - --cache-from
      - ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}:latest
      - -f
      - Dockerfile

  # Push the container image to Container Registry
  - name: gcr.io/cloud-builders/docker
    args:
      - push
      - ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}:$SHORT_SHA
  - name: gcr.io/cloud-builders/docker
    args:
      - push
      - ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}:latest

  - name: gcr.io/cloud-builders/gcloud
    args:
      - auth 
      - configure-docker 
      - ${_REGION}-docker.pkg.dev 
  # Clone terraform repo and deploy with new image
  - name: 'gcr.io/cloud-builders/git'
    entrypoint: bash
    args:
    - -c
    - |
      # clone the terraform repo without history, make sure cloudbuild has access to this repo
      git clone --depth 1 https://$$GITHUB_TOKEN@github.com/asumsi/parthenon
    secretEnv: ['GITHUB_TOKEN']
  - name: 'hashicorp/terraform:1.0.0'
    entrypoint: /bin/sh
    args:
    - -c
    - |
      # switch working directory to gcp/deployment/prod
      cd parthenon/gcp/deployment/prod
      # execute terraform commands to deploy with new image passed with variable
      terraform init --upgrade
      terraform apply -auto-approve -var 'room_image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}:$SHORT_SHA'

images:
  - ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}:$SHORT_SHA
  - ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}:latest

options:
    dynamic_substitutions: true
    logging: CLOUD_LOGGING_ONLY
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/github_token/versions/latest
    env: 'GITHUB_TOKEN'
  - versionName: projects/$PROJECT_ID/secrets/ROOM_PROD_DB_HOST/versions/latest
    env: 'DB_HOST'
  - versionName: projects/$PROJECT_ID/secrets/ROOM_PROD_DB_NAME/versions/latest
    env: 'DB_NAME'
  - versionName: projects/$PROJECT_ID/secrets/ROOM_PROD_DB_PASS/versions/latest
    env: 'DB_PASS'
  - versionName: projects/$PROJECT_ID/secrets/ROOM_PROD_DB_USER/versions/latest
    env: 'DB_USER'
  - versionName: projects/$PROJECT_ID/secrets/prod_mailgun_key/versions/latest
    env: 'MAILER_API_KEY'
  - versionName: projects/$PROJECT_ID/secrets/prod_mailgun_domain/versions/latest
    env: 'MAILER_DOMAIN'
  - versionName: projects/$PROJECT_ID/secrets/ROOM_PROD_HUB_KEY/versions/latest
    env: 'INLIVE_HUB_API_KEY'
